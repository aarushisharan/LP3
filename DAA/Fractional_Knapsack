#include <iostream>
#include <vector>
#include <algorithm> // for sort

using namespace std;

// Function to calculate maximum profit using fractional knapsack
double frac_knapsack(vector<pair<int, int>>& items, int capacity) {
    int n = items.size();
    double profit = 0.0;
    vector<pair<double, int>> prof_wt(n);

    // Calculate profit/weight ratio for each item
    for (int i = 0; i < n; i++) {
        prof_wt[i] = { (double)items[i].first / items[i].second, i }; // save the pair(prof_wt ratio, index)
    }

    // Sort items based on profit/weight ratio in descending order
    sort(prof_wt.rbegin(), prof_wt.rend());// sort in descending order

    // Iterate over sorted items
    for (int i = 0; i < n; i++) {
        int idx = prof_wt[i].second;
        if (capacity >= items[idx].second) {
            // Take the whole item if possible
            profit += items[idx].first;
            capacity -= items[idx].second;
        } else {
            // Take fraction of the item if capacity is less than item's weight
            profit += items[idx].first * ((double)capacity / items[idx].second);
            break;
        }
    }

    return profit;
}

int main() {
    int capacity, n;
    cout << "Enter capacity: ";
    cin >> capacity;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<pair<int, int>> items(n);
    cout << "Enter the profit and weight of each item:" << endl;
    for (int i = 0; i < n; i++) {
        cout << "Item " << i + 1 << " (profit weight): ";
        cin >> items[i].first >> items[i].second;
    }

    double max_profit = frac_knapsack(items, capacity);
    cout << "Maximum Profit: " << max_profit << endl;

    return 0;
}
